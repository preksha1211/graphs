class DisjointSet{
    List<Integer> parent=new ArrayList<>();
    List<Integer> rank=new ArrayList<>();
    DisjointSet(int n){
        for(int i=0;i<=n;i++){
            parent.add(i);
            rank.add(0);
        }
    }
    public int findParent(int node){
        if(parent.get(node)==node){
            return node;
        }
        int up=findParent(parent.get(node));
        parent.set(node,up);
        return up;
    }
    public void rankByUnion(int u,int v){
        int uu=findParent(u);
        int uv=findParent(v);
        if(uu==uv) return;
        if(rank.get(uu)>rank.get(uv)){
            parent.set(uv,uu);
        }
        else if(rank.get(uu)<rank.get(uv)){
            parent.set(uu,uv);
        }
        else{
            parent.set(uv,uu);
            int rr=rank.get(uu);
            rank.set(uu,rr+1);
        }
    }
}
class Solution {
    public int makeConnected(int n, int[][] connections) {
        DisjointSet ds=new DisjointSet(n);
        int extra=0;
        for(int[] edge:connections){
            int u=edge[0];
            int v=edge[1];
            if(ds.findParent(u)==ds.findParent(v)){
                extra++;
            }
            else{
                ds.rankByUnion(u,v);
            }
        }
        int com=0;
        for(int i=0;i<n;i++){
            if(ds.parent.get(i)==i){
                com++;
            }
        }
        if(extra>=com-1){
            return com-1;
        }
        return -1;
    }
}
